{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jerie\\\\OneDrive\\\\Documents\\\\GitHub\\\\CVWO\\\\gym-forum\\\\src\\\\components\\\\PostList.tsx\",\n  _s = $RefreshSig$();\n// src/components/PostList.tsx\nimport React, { useEffect, useState } from 'react';\nimport { getPosts } from '../services/apiService';\nimport cable from '../services/cableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const data = await getPosts();\n        setPosts(data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts(); // Fetch posts initially\n\n    const subscription = cable.subscriptions.create('PostsChannel', {\n      received(data) {\n        setPosts(prevPosts => [data.post, ...prevPosts]); // Prepend new post\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"By User \", post.user_id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","getPosts","cable","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","fetchPosts","data","error","console","subscription","subscriptions","create","received","prevPosts","post","unsubscribe","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","body","user_id","id","_c","$RefreshReg$"],"sources":["C:/Users/jerie/OneDrive/Documents/GitHub/CVWO/gym-forum/src/components/PostList.tsx"],"sourcesContent":["// src/components/PostList.tsx\nimport React, { useEffect, useState } from 'react';\nimport { getPosts } from '../services/apiService';\nimport cable from '../services/cableService';\n\nconst PostList: React.FC = () => {\n  const [posts, setPosts] = useState<any[]>([]);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const data = await getPosts();\n        setPosts(data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n\n    fetchPosts(); // Fetch posts initially\n\n    const subscription = cable.subscriptions.create('PostsChannel', {\n      received(data) {\n        setPosts((prevPosts) => [data.post, ...prevPosts]); // Prepend new post\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>Posts</h2>\n      {posts.map((post) => (\n        <div key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n          <p>By User {post.user_id}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PostList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,OAAOC,KAAK,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAQ,EAAE,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAAC,CAAC;QAC7BO,QAAQ,CAACE,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDF,UAAU,CAAC,CAAC,CAAC,CAAC;;IAEd,MAAMI,YAAY,GAAGX,KAAK,CAACY,aAAa,CAACC,MAAM,CAAC,cAAc,EAAE;MAC9DC,QAAQA,CAACN,IAAI,EAAE;QACbF,QAAQ,CAAES,SAAS,IAAK,CAACP,IAAI,CAACQ,IAAI,EAAE,GAAGD,SAAS,CAAC,CAAC,CAAC,CAAC;MACtD;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXJ,YAAY,CAACM,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbjB,KAAK,CAACkB,GAAG,CAAEP,IAAI,iBACdd,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAKF,IAAI,CAACQ;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBpB,OAAA;QAAAgB,QAAA,EAAIF,IAAI,CAACS;MAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBpB,OAAA;QAAAgB,QAAA,GAAG,UAAQ,EAACF,IAAI,CAACU,OAAO;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAHrBN,IAAI,CAACW,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIZ,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAtCID,QAAkB;AAAAyB,EAAA,GAAlBzB,QAAkB;AAwCxB,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}